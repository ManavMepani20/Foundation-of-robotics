import rclpy
from rclpy.node import Node
from dynamixel_sdk_custom_interfaces.srv import GetPosition
from dynamixel_sdk_custom_interfaces.msg import SetCurrent
from my_service_package.srv import FloatPos
from std_msgs.msg import Int32
import numpy as np
import time

class GetCurrentPosition(Node):
    def __init__(self):
        super().__init__('get_current_position')
        self.pos_client = self.create_client(GetPosition, 'get_position')
        self.request = GetPosition.Request()

        while not self.pos_client.wait_for_service(timeout_sec=1.0):
            self.get_logger().info('GetPosition service not available, waiting again...')

    def get_joint_position(self, motor_id):
        """Send a request to get the joint position and return the position."""
        self.request.id = motor_id
        future = self.pos_client.call_async(self.request)
        rclpy.spin_until_future_complete(self, future)
        try:
            response = future.result()
            if response is not None:
                return response.position
        except Exception as e:
            self.get_logger().error(f"Failed to get position: {e}")
        return None

class PDControl(Node):
    def __init__(self, position_node):
        super().__init__('pd_control')
        self.position_node = position_node
        self.previous_time = None
        self.previous_position = None
        self.flag = True

        # PD controller constants
        self.kp = 0.08
        self.kd = 0.01
        self.ID = 14

        # Effort publisher and service for setting targets
        self.effort_publisher = self.create_publisher(SetCurrent, 'set_current', 10)
        self.create_service(FloatPos, 'currentcalc', self.start_calculation)

        # Timer for control loop
        self.timer = self.create_timer(0.01, self.process_loop)  # 100 Hz control loop
        self.target_pos = None
        self.current_target_index = 0
        self.previous_error = 0.0

        # Logging setup
        self.log_file = open("position_log.txt", "w")
        self.start_time = time.time()
        self.logging_duration = 10  # seconds

    def start_calculation(self, request, response):
        """Service callback to start the current calculation."""
        self.target_pos = np.array(request.pos4)
        self.current_target_index = 0
        self.get_logger().info(f"Starting calculation with target positions: {self.target_pos}")
        response.success = True
        return response

    def process_loop(self):
        """Process the control loop for current calculation."""
        if self.target_pos is None or self.current_target_index >= len(self.target_pos):
            return
        if self.flag:
            self.previous_position = self.position_node.get_joint_position(self.ID)
            self.flag = False

        current_position = self.position_node.get_joint_position(self.ID)
        if current_position is None:
            return  # Exit if position is unavailable

        current_time = self.get_clock().now().to_msg()
        if self.previous_position is not None and self.previous_time is not None:
            dt = (current_time.sec - self.previous_time.sec) + (current_time.nanosec - self.previous_time.nanosec) * 1e-9
        else:
            dt = 0.01

        target_position = self.target_pos[self.current_target_index]
        error = target_position - current_position
        derivative = (current_position - self.previous_position) / dt
        self.previous_error = error

        # PD control law
        effort = self.kp * error - self.kd * derivative

        # Publish effort
        current_msg = SetCurrent()
        current_msg.id = self.ID
        current_msg.current = int(effort)
        self.effort_publisher.publish(current_msg)

        self.get_logger().info(f"Effort: {effort}, Position: {current_position}, Error: {error}, Derivative: {derivative}")

        # Log current and target positions
        elapsed_time = time.time() - self.start_time
        if elapsed_time <= self.logging_duration:
            self.log_file.write(f"Time: {elapsed_time:.2f}s, Current Position: {current_position}, Target Position: {target_position}\n")
        elif not self.log_file.closed:
            self.log_file.close()
            self.get_logger().info("Stopped logging positions after 10 seconds.")

        self.previous_position = current_position
        self.previous_time = current_time

        # Check if target position is reached
        if abs(error) < 5:  # Tolerance for reaching the target
            self.current_target_index += 1

        if self.current_target_index >= len(self.target_pos):
            self.get_logger().info("Calculation complete.")
            self.target_pos = None

def main():
    rclpy.init()
    position_node = GetCurrentPosition()
    pd_control_node = PDControl(position_node)

    try:
        rclpy.spin(pd_control_node)
    except KeyboardInterrupt:
        pass
    finally:
        if not pd_control_node.log_file.closed:
            pd_control_node.log_file.close()
        position_node.destroy_node()
        pd_control_node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

